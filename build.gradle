import com.github.davidmc24.gradle.plugin.avro.GenerateAvroJavaTask

plugins {
    id 'org.springframework.boot' version '2.5.3'
    id "com.wiredforcode.spawn" version "0.8.2"
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "com.github.davidmc24.gradle.plugin.avro" version "1.2.1"
    id "com.avast.gradle.docker-compose" version "0.14.9"
    id 'java'
}

group = 'com.ntnn.custom'
version = '0.0.1'
sourceCompatibility = '11'

apply plugin: "com.wiredforcode.spawn"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven {
        url('https://dl.bintray.com/vermeulen-mp/gradle-plugins')
    }
    maven {
        url('https://packages.confluent.io/maven/')
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.json:json:20210307'
    implementation "org.apache.avro:avro:1.10.2"
    implementation 'com.github.davidmc24.gradle.plugin:gradle-avro-plugin:1.2.0'
    // https://mvnrepository.com/artifact/org.apache.kafka/kafka-clients
    implementation 'org.apache.kafka:kafka-clients:2.8.0'
    // https://mvnrepository.com/artifact/org.springframework.kafka/spring-kafka
    implementation 'org.springframework.kafka:spring-kafka:2.7.6'
    implementation "io.confluent:kafka-avro-serializer:5.3.0"
    implementation "io.confluent:kafka-streams-avro-serde:5.2.1"
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
}
//
//sourceSets {
//    main.java.srcDir += 'src/main/java'
//    main.java.srcDir += "${buildDir}/generated/avro-java"
//}

avro {
    //convert all string type to "java.lang.CharSequence"
    stringType = "CharSequence"
}

def generateAvro = tasks.register("generateAvro", GenerateAvroJavaTask) {
    source("src/main/resources/avro_file")
    outputDir = file("src/main/java/com/ntnn/custom/meow/repository/model/avro")
}

tasks.named("compileJava").configure {
    source(generateAvro)
}

dockerCompose {
    useComposeFiles = ['src/main/docker/docker-compose.yml']
}

task startTestEnvironment {
    dependsOn += ["composeUp"]
}

task stopTestEnvironment {
    dependsOn += ["composeDown"]
}

task componentTest() {
    dependsOn(startTestEnvironment)
    doLast {
        println "Success"
    }
}

task startServer(type: SpawnProcessTask) {
    command "java -jar ${buildDir}/build/libs/meow-0.0.1.jar"
    ready 'Started Application'
    pidLockFileName '/build/.bootRun.pid.lock'
}

task stopServer(type: KillProcessTask) {
    pidLockFileName '/build/.bootRun.pid.lock'
}

def Process process
task startAppWindow {
    def builder = new ProcessBuilder()
                .command("cmd", "/k", "build.sh")
    doLast {
        process = builder.start()
    }
}


task stopAppWindow {
    if(process != null) process.destroy()
}